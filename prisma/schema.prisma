// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  carts     Cart[]   @relation("UserCarts")
  orders    Order[]  @relation("UserOrders")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation("UserCarts", fields: [userId], references: [id])
  userId    String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     String // Add this line
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id             String       @id @default(uuid())
  user           User?        @relation("UserOrders", fields: [userId], references: [id])
  userId         String? // This allows the order to be linked to a user or not
  userName       String // Store the customer's name directly
  items          OrderItem[] // List of order items
  status         String // Status of the order (e.g., Pending, Completed)
  total          Float // Total price of the order
  shippingInfo   ShippingInfo @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId String // Link to the shipping information
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  color     String // Add this line
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  imgUrl      String
  color       String[]
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ShippingInfo {
  id        String   @id @default(uuid())
  address   String
  mobile    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  orders    Order[] // Relation to orders
}

model AuthorizedPointOfSale {
  id           String   @id @default(uuid())
  name         String
  location     String
  locationlink String?
  latitude     Float?
  longitude    Float?
  phone        String?
  category     String
  website      String?
  logo         String
  altLogo      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
